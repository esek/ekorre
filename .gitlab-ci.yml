# This is a GitLab CI configuration to build the project as a docker image
# The file is generic enough to be dropped in a project containing a working Dockerfile
# Author: Florent CHAUVEAU <florent.chauveau@gmail.com>
# Mentioned here: https://blog.callr.tech/building-docker-images-with-gitlab-ci-best-practices/

# do not use "latest" here, if you want this to work in the future
image: docker:19

stages:
  - test
  - build
  - dockerize
  - push
  - deploy

variables:
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest

cache:
  paths:
    - node_modules
  key: ${CI_COMMIT_REF_SLUG}

before_script:
  # docker login asks for the password to be passed through stdin for security
  # we use $CI_JOB_TOKEN here which is a special token provided by GitLab
  - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
  - docker info

lint:
  stage: test
  image: node:15
  # Make sure docker info is not run and get some node info
  before_script:
    - node --version
  script:
    - npm install # Egentligen kanske man ska använda ci
    - npx eslint src

build:
  stage: build
  image: node:15
  # Make sure docker info is not run and get some node info
  before_script:
    - node --version
  only:
    - master
    - main
    - /^release-[0-9]+\.[0-9]+\.[0-9]+$/
  script:
    # Cachad node_modules from lint
    - npm run build
    # Minska ner inför dockerize steg
    - npm prune --production
  artifacts:
    paths:
      - node_modules
      - build
      - package.json

dockerize:
  stage: dockerize
  only:
    - master
    - main
    - /^release-[0-9]+\.[0-9]+\.[0-9]+$/
  dependencies:
    - build
  script:
    - docker build -f Dockerfile.ci -t $CONTAINER_TEST_IMAGE .
    - docker push $CONTAINER_TEST_IMAGE

# # Here, the goal is to tag the "master" branch as "latest"
push latest:
  variables:
    # We are just playing with Docker here. 
    # We do not need GitLab to clone the source code.
    GIT_STRATEGY: none
  stage: push
  only:
    # Only "master" should be tagged "latest"
    - master
    - main
  script:
    # Because we have no guarantee that this job will be picked up by the same runner 
    # that built the image in the previous step, we pull it again locally
    - docker pull $CONTAINER_TEST_IMAGE
    # Then we tag it "latest"
    - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_RELEASE_IMAGE
    # Annnd we push it.
    - docker push $CONTAINER_RELEASE_IMAGE

# Finally, the goal here is to Docker tag any Git tag
# GitLab will start a new pipeline everytime a Git tag is created, which is pretty awesome
push tag:
  variables:
    # Again, we do not need the source code here. Just playing with Docker.
    GIT_STRATEGY: none
  stage: push
  only:
    # We want this job to be run on tags only.
    - tags
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker tag $CONTAINER_TEST_IMAGE $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
