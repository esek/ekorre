# This is a GitLab CI configuration to build the project as a docker image
# The file is generic enough to be dropped in a project containing a working Dockerfile
# Author: Florent CHAUVEAU <florent.chauveau@gmail.com>
# Mentioned here: https://blog.callr.tech/building-docker-images-with-gitlab-ci-best-practices/

# do not use "latest" here, if you want this to work in the future
image: docker:latest

variables:
  NODE_VERSION: 16-alpine

stages:
  - test
  - build
  - deploy

.remote_docker:
  variables:
    DOCKER_HOST: ssh://root@$DESTINATION_HOST
    PROJECT_NAME: ekorre # This should not contain any special chars
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa $DESTINATION_HOST >> ~/.ssh/known_hosts

docker build:
  # Use the official docker image.
  stage: build
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - docker build --build-arg "NODE_VERSION=$NODE_VERSION" --pull -t "$CI_REGISTRY_IMAGE${tag}" .
    - docker push "$CI_REGISTRY_IMAGE${tag}"
    - docker image prune -af --filter "until=48h"
  # Run this job in a branch where a Dockerfile exists
  rules:
    - if: ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH) || $CI_MERGE_REQUEST_ID
      exists:
        - Dockerfile
lint:
  stage: test
  image: "node:$NODE_VERSION"
  # Make sure docker info is not run and get some node info
  before_script:
    - node --version
    - npm ci --cache .npm --prefer-offline
  script:
    - npx eslint src
    - npx eslint test
  rules:
    - if: ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH) || $CI_MERGE_REQUEST_ID
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .npm/

tests:
  stage: test
  # Must be run on docker runner
  tags:
    - docker
  image:
    name: "node:$NODE_VERSION"
  before_script:
    - node --version
    - npm ci --cache .npm --prefer-offline
  script:
    - apk update
    - apk add sqlite
    - ./tools/initenv.sh
    - npm run test:prebuild
    - ./test/utils/test-server-startup.sh
    - npm run test:regression
  rules:
    - if: ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH) || $CI_MERGE_REQUEST_ID
  artifacts:
    paths:
      - coverage
    expire_in: 1 week
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .npm/

.pre_deploy:
  script:
    - echo "Pulling image tagged $IMAGE_TAG"
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$IMAGE_TAG

.clean:
  script:
    - echo "Removing $DEPLOY_NAME from project $PROJECT_NAME"
    - docker stop $DEPLOY_NAME 2> /dev/null || true
    - docker rm --force $DEPLOY_NAME 2> /dev/null || true
    - docker image prune -f --filter "label=project=$PROJECT_NAME"

.deploy:
  script:
    - echo "Deploying $IMAGE_TAG on $DEPLOY_NAME"
    - docker run
      --name $DEPLOY_NAME
      --env ALLOWED_ORIGINS=$ALLOWED_ORIGINS
      --env COOKIE_DOMAIN=esek.se
      --network traefik
      -d $CI_REGISTRY_IMAGE:$IMAGE_TAG

deploy image:
  variables:
    DEPLOY_NAME: "ekorre"
    IMAGE_TAG: latest
  stage: deploy
  extends: .remote_docker
  script:
    - !reference [.clean, script]
    - !reference [.pre_deploy, script]
    - docker run
      --name $DEPLOY_NAME
      --env ALLOWED_ORIGINS=$ALLOWED_ORIGINS
      --env COOKIE_DOMAIN=esek.se
      --network traefik
      --label "traefik.http.routers.$PROJECT_NAME.rule=Host(\`$DEPLOY_NAME.esek.se\`)"
      -d $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH
  environment:
    name: production
    url: "$DEPLOY_NAME.ekorre.se"
  needs: ['docker build', 'tests']
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

deploy review:
  variables:
    DEPLOY_NAME: $PROJECT_NAME-$CI_COMMIT_REF_SLUG
    IMAGE_TAG: $CI_COMMIT_REF_SLUG
  stage: deploy
  extends: .remote_docker
  script:
    - !reference [.clean, script]
    - !reference [.pre_deploy, script]
    - !reference [.deploy, script]
  environment:
    name: "review/$DEPLOY_NAME"
    url: "https://$DEPLOY_NAME.esek.se"
    on_stop: 'stop review'
  needs: ['docker build', 'tests']
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_MERGE_REQUEST_ID

stop review:
  variables:
    DEPLOY_NAME: $PROJECT_NAME-$CI_COMMIT_REF_SLUG
  stage: deploy
  extends: .remote_docker
  script:
    - echo "Removing deploy for $DEPLOY_NAME"
    - !reference [.clean, script]
  environment:
    name: "review/$DEPLOY_NAME"
    action: stop
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_MERGE_REQUEST_ID
      when: manual

