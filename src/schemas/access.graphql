
#import User from './user.graphql'
#import Post from './post.graphql'
scalar Date
type Query {
    individualAccess(username: String!): Access!
    postAccess(postId: Int!): Access!
    features: [FeatureInfo!]!
    doors: [DoorInfo!]!
    postAccessLogs: [AccessLogPost]!
}

type Mutation {
    setIndividualAccess(username: String!, access: AccessInput!): Boolean!
    setPostAccess(postId: Int!, access: AccessInput!): Boolean!
    setApiKeyAccess(key: String!, access: AccessInput!): Boolean!
}

extend type User {
    """
    This will be all the access have concated from Posts and personal
    """
    access: Access!
}

"Access will be treated as a immutable object!"
type Access {
    doors: [Door!]!
    features: [Feature!]!
}

input AccessInput {
    doors: [Door!]!
    features: [Feature!]!
}

type FeatureInfo {
    name: Feature!
    description: String!
}

type DoorInfo {
    name: Door!
    description: String!
}

type AccessLogPost {
    grantor: User!
    target: Post!
    resourceType: AccessResourceType!
    resource: String!
    isActive: Boolean!
    timestamp: Date!
}

enum AccessResourceType {
    door
    feature
}

"""This represets all doors that E-sektionen own"""
enum Door {
    arkivet,
    bd,
    biljard,
    cm,
    edekvata,
    ekea,
    hk,
    km
    led,
    ledtoa,
    pa,
    pump,
    sikrit,
    ulla,
}

"""Features are used for mapping access to a feature (ex article or election) for user or a post. This is not limited to efterphest"""
enum Feature {
    superadmin,
    access_admin,
    article_editor,
    election_admin,
    files_admin,
    hehe_admin,
    meetings_admin
    news_editor,
    post_admin,
    user_admin,
    email_admin,
    ahs_admin,
    activity_admin
    decibel_admin,
}
