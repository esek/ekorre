# import User from 'user.graphql'
# import Post from 'post.graphql'

scalar DateTime

type Query {
  openElection: Election
  latestElections(limit: Int): [Election]!
  election(electionId: ID!): Election
  elections(electiondIds: [ID!]!): [Election]!

  """
  Used if nominations are hidden but an election-admin wants too see nominations
  """
  hiddenNominations(electionId: ID!): [Nomination]!

  "A users own nominations should always be available to them"
  myNominations(electionId: ID!): [Nomination]!
  numberOfNominations(electionId: ID!, postname: String): Int!
}

type Mutation {
  createElection(electables: [String]!, nominationsHidden: Boolean!): Boolean!
  addElectables(postnames: [String!]): Boolean!
  removeElectables(postnames: [String!]): Boolean!
  openElection(electionId: ID!): Boolean!
  closeElection: Boolean!
  nominate(electionId: ID!, username: String!, postname: String!): Boolean!
  propose(electionId: ID!, username: String!, postname: String!): Boolean!
  respondToNomination(electionId: ID!, username: String!, postname: String!, accepts: NominationAnswer!): Boolean!
}

type Election {
  id: ID!
  creator: User!
  createdAt: DateTime!
  openedAt: DateTime
  closedAt: DateTime
  open: Boolean!

  "Which posts can be elected in the election"
  electables: [Post]!

  proposals: [Proposal]

  "Is only available if `nominationsHidden` is `false`"
  nominations: [Nomination]

  "Whether the nominations and their responses are anonymous"
  nominationsHidden: Boolean!
}

"Valberedningens f√∂rslag"
type Proposal {
  user: User!
  post: Post!
}

type Nomination {
  user: User!
  post: Post!
  accepted: NominationAnswer!
}

enum NominationAnswer {
  YES
  NO
  NO_ANSWER
}
