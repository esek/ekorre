# import User from 'user.graphql'
# import Post from 'post.graphql'

scalar DateTime

"""
Queries and mutations that relies on an election being open
does not take an `electionId` parameter.
"""

type Query {
  openElection: Election!
  latestElections(limit: Int, includeUnopened: Boolean, includeHiddenNominations: Boolean): [Election!]!
  election(electionId: Int!): Election!
  elections(electionIds: [Int!]!): [Election!]!

  """
  Used if nominations are hidden but an election-admin wants too see nominations
  """
  hiddenNominations(electionId: Int!, answer: NominationAnswer): [Nomination!]!

  "A users own nominations should always be available to them"
  myNominations(electionId: Int!, answer: NominationAnswer): [Nomination!]!
  numberOfNominations(electionId: Int!, postId: Int): Int!
  numberOfProposals(electionId: Int!, postId: Int): Int!
}

type Mutation {
  createElection(electables: [Int!]!, nominationsHidden: Boolean!): Election!
  addElectables(electionId: Int!, postIds: [Int!]!): Boolean!
  removeElectables(electionId: Int!, postIds: [Int!]!): Boolean!
  setElectables(electionId: Int!, postIds: [Int!]!): Boolean!
  setHiddenNominations(electionId: Int!, hidden: Boolean!): Boolean!
  openElection(electionId: Int!): Boolean!
  closeElection: Boolean!

  "Only possible during open election, so electionId is known"
  nominate(username: String!, postIds: [Int!]!): Boolean!

  "Only possible during open election, so electionId is known"
  respondToNomination(postId: Int!, accepts: NominationAnswer!): Boolean!
  propose(electionId: Int!, username: String!, postId: Int!): Boolean!
  removeProposal(electionId: Int!, username: String!, postId: Int!): Boolean!
}

type Election {
  id: Int!
  creator: User!
  createdAt: DateTime!
  openedAt: DateTime
  closedAt: DateTime
  open: Boolean!

  "Which posts can be elected in the election"
  electables: [Post!]!
  proposals: [Proposal]

  "Is only available if `nominationsHidden` is `false`"
  acceptedNominations: [Nomination!]!

  "Whether accepted nominations are to be hidden"
  nominationsHidden: Boolean!
}

"Valberedningens f√∂rslag"
type Proposal {
  user: User!
  post: Post!
}

type Nomination {
  user: User!
  post: Post!
  answer: NominationAnswer!
}

enum NominationAnswer {
  YES
  NO
  NOT_ANSWERED
}
