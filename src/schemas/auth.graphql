# import User from 'user.graphql'
# import Access from 'access.graphql'

type Query {
    apiKey(key: String!): ApiKey!
    apiKeys: [ApiKey!]!
}

type Mutation {
  "Test user credentials and if valid get a jwt token"
  login(username: String!, password: String!): LoginResponse!
  logout: Boolean!
  issueTokens(username: String!): TokenResponse!
  refresh(refreshToken: String!): TokenResponse!
  validateToken(token: String!): Boolean!

  linkLoginProvider(input: ProviderOptions!): LoginProvider!
  unlinkLoginProvider(id: Int!): Boolean!
  providerLogin(input: ProviderOptions!): LoginResponse!

  casLogin(token: String!): CasLoginResponse!

  createApiKey(description: String!): String!
  deleteApiKey(key: String!): Boolean!
}

type LoginResponse {
  user: User!
  accessToken: String!
  refreshToken: String!
}

type TokenResponse {
  accessToken: String!
  refreshToken: String!
}


type CasLoginResponse {
  username: String!
  hash: String
  exists: Boolean!
}

type ApiKey {
    key: String!
    description: String!
    access: Access!
    creator: User!
}


input ProviderOptions {
  token: String!
  email: String
  provider: String!
}

type LoginProvider {
  id: Int!
  token: String!
  email: String
  provider: String!
}