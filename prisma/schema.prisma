// *** GENERATED BY PRISMIX :: DO NOT EDIT ***
datasource pg {
  provider = "postgresql"
  url      = env("DB_HOST")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

model AccessMapping {
  id          Int               @id @default(autoincrement())
  type        AccessMappingType
  name        String
  page        String?
  resource    AccessResource    @relation(name: "AccessMappingToAccessResource", fields: [refResource], references: [slug])
  refResource String

  @@unique([type, name, page])
}

model AccessResource {
  slug        String             @id
  mappings    AccessMapping[]    @relation(name: "AccessMappingToAccessResource")
  name        String
  description String
  resouceType ResourceType
  userAccess  IndividualAccess[] @relation(name: "AccessResourceToIndividualAccess")
  postAccess  PostAccess[]       @relation(name: "AccessResourceToPostAccess")
}

model IndividualAccess {
  id          Int            @id @default(autoincrement())
  user        User           @relation(name: "IndividualAccessToUser", fields: [refUser], references: [username])
  refUser     String
  resource    AccessResource @relation(name: "AccessResourceToIndividualAccess", fields: [refResource], references: [slug])
  refResource String
}

model User {
  username          String             @id
  access            IndividualAccess[] @relation(name: "IndividualAccessToUser")
  articles          Article[]          @relation(name: "ArticleToUser")
  elections         Election[]         @relation(name: "ElectionToUser")
  nominations       Nomination[]       @relation(name: "NominationToUser")
  proposals         Proposal[]         @relation(name: "ProposalToUser")
  files             File[]             @relation(name: "FileToUser")
  heHes             HeHe[]             @relation(name: "HeHeToUser")
  postHistory       PostHistory[]      @relation(name: "PostHistoryToUser")
  emergencyContacts EmergencyContact[] @relation(name: "EmergencyContactToUser")
  passwordResets    PasswordReset[]    @relation(name: "PasswordResetToUser")
  passwordHash      String
  passwordSalt      String
  firstName         String
  lastName          String
  class             String
  photoUrl          String?
  email             String             @unique
  phone             String?
  address           String?
  zipCode           String?
  website           String?
  dateJoined        DateTime           @default(now())
  isFuncUser        Boolean            @default(false)
}

model PostAccess {
  id          Int            @id @default(autoincrement())
  post        Post           @relation(name: "PostToPostAccess", fields: [refPost], references: [slug])
  refPost     String
  resource    AccessResource @relation(name: "AccessResourceToPostAccess", fields: [refResource], references: [slug])
  refResource String
}

model Post {
  slug              String        @id
  access            PostAccess[]  @relation(name: "PostToPostAccess")
  electables        Electable[]   @relation(name: "ElectableToPost")
  nominations       Nomination[]  @relation(name: "NominationToPost")
  history           PostHistory[] @relation(name: "PostToPostHistory")
  postname          String
  utskott           String
  description       String
  spots             Int
  postType          String
  active            Boolean       @default(true)
  interviewRequired Boolean       @default(false)
}

model ArticleTag {
  id         Int      @id @default(autoincrement())
  tag        String   @unique
  createdAt  DateTime @default(now())
  article    Article  @relation(name: "ArticleToArticleTag", fields: [refArticle], references: [id])
  refArticle Int
}

model Article {
  id        Int          @id @default(autoincrement())
  tags      ArticleTag[] @relation(name: "ArticleToArticleTag")
  slug      String       @unique
  title     String
  body      String
  signature String
  type      ArticleType  @default(INFORMATION)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now())
  author    User         @relation(name: "ArticleToUser", fields: [refAuthor], references: [username])
  refAuthor String
}

model Electable {
  id          Int      @id @default(autoincrement())
  post        Post     @relation(name: "ElectableToPost", fields: [refPost], references: [slug])
  refPost     String
  election    Election @relation(name: "ElectableToElection", fields: [refElection], references: [id])
  refElection Int
}

model Election {
  id                Int         @id @default(autoincrement())
  electables        Electable[] @relation(name: "ElectableToElection")
  creator           User        @relation(name: "ElectionToUser", fields: [refCreator], references: [username])
  refCreator        String
  createdAt         DateTime    @default(now())
  openedAt          DateTime?
  closedAt          DateTime?
  open              Boolean     @default(false)
  nominationsHidden Boolean     @default(false)
  proposals         Proposal[]  @relation(name: "ElectionToProposal")
}

model Nomination {
  id       Int                @id @default(autoincrement())
  response NominationResponse @default(PENDING)
  user     User               @relation(name: "NominationToUser", fields: [refUser], references: [username])
  refUser  String
  post     Post               @relation(name: "NominationToPost", fields: [refPost], references: [slug])
  refPost  String
}

model Proposal {
  id          Int      @id @default(autoincrement())
  user        User     @relation(name: "ProposalToUser", fields: [refUser], references: [username])
  refUser     String
  election    Election @relation(name: "ElectionToProposal", fields: [refElection], references: [id])
  refElection Int
}

model File {
  id                   String   @id @default(cuid())
  name                 String
  type                 String
  folderLocation       String
  accessType           String
  createdAt            DateTime @default(now())
  uploader             User     @relation(name: "FileToUser", fields: [refUploader], references: [username])
  refUploader          String
  heHe                 HeHe?    @relation(name: "FileToHeHe")
  meetingSummons       Meeting? @relation(name: "MeetingSummons")
  meetingDocuments     Meeting? @relation(name: "MeetingDocuments")
  meetingLateDocuments Meeting? @relation(name: "MeetingLateDocuments")
  meetingProtocols     Meeting? @relation(name: "MeetingProtocols")
  meetingAppendix      Meeting? @relation(name: "MeetingAppendix")
}

model HeHe {
  id          Int      @id @default(autoincrement())
  number      Int
  year        Int
  uploadedAt  DateTime @default(now())
  uploader    User     @relation(name: "HeHeToUser", fields: [refUploader], references: [username])
  refUploader String
  file        File     @relation(name: "FileToHeHe", fields: [refFile], references: [id])
  refFile     String   @unique

  @@unique([number, year])
}

model Meeting {
  id               Int         @id @default(autoincrement())
  type             MeetingType
  number           Int
  year             Int
  summons          File        @relation(name: "MeetingSummons", fields: [refSummons], references: [id])
  refSummons       String      @unique
  documents        File        @relation(name: "MeetingDocuments", fields: [refDocuments], references: [id])
  refDocuments     String      @unique
  lateDocuments    File        @relation(name: "MeetingLateDocuments", fields: [refLateDocuments], references: [id])
  refLateDocuments String      @unique
  protocol         File        @relation(name: "MeetingProtocols", fields: [refProtocol], references: [id])
  refProtocol      String      @unique
  appendix         File        @relation(name: "MeetingAppendix", fields: [refAppendix], references: [id])
  refAppendix      String      @unique

  @@unique([type, number, year])
}

model PostHistory {
  id        Int      @id @default(autoincrement())
  user      User     @relation(name: "PostHistoryToUser", fields: [refUser], references: [username])
  refUser   String
  post      Post     @relation(name: "PostToPostHistory", fields: [refPost], references: [slug])
  refPost   String
  startDate DateTime
  endDate   DateTime
}

model EmergencyContact {
  id      Int    @id @default(autoincrement())
  name    String
  type    String
  phone   String
  user    User   @relation(name: "EmergencyContactToUser", fields: [refUser], references: [username])
  refUser String
}

model PasswordReset {
  token   String   @id
  User    User     @relation(name: "PasswordResetToUser", fields: [refUser], references: [username])
  refUser String
  time    DateTime @default(now())
}

enum AccessMappingType {
  QUERY
  MUTATION
  PAGE
}

enum ResourceType {
  DOOR
  WEB
}

enum ArticleType {
  NEWS
  INFORMATION
}

enum NominationResponse {
  ACCEPTED
  REJECTED
  PENDING
}

enum MeetingType {
  SM
  VM
  VTM
  HTM
}

enum PostType {
  EA
  EXACT_N
}
